import java.io.FileWriter; 
import java.io.IOException; 


public class MetaTest {
	public static void main(String[] args) {
		

		try {
			FileWriter sumFile = new FileWriter("sum.txt"); 
			sumFile.write("BIG_INT * A = base_ctor();");
			sumFile.write("BIG_INT * B = base_ctor();");
			sumFile.write("BIG_INT * R = base_ctor();");
			sumFile.write("BIG_INT * T = base_ctor();");
			sumFile.write("\r\n");

			String[][] sums = new String[][]{
				{"20003", "2456", "22459"},
				{"96643","75754", "172397"},
				{"99900", "6006", "105906"},
			{"9984", "2556", "12540"}, 
			{"8974","2554336", "2563310"},
			{"9984", "5112556", "5122540"},
			{"0", "0", "0"},
			{"157624825433230490762246168127797657567916321816555529634539929", "3324298954062642979937715273000088457741871468238391929188212688", "3481923779495873470699961441127886115309787790054947458822752617"},
			{"157624825433230490762246168127797657567916321816555529634539929","-3324298954062642979937715273000088457741871468238391929188212688","-3166674128629412489175469104872290800173955146421836399553672759"},
			{"-157624825433230490762246168127797657567916321816555529634539929", "3324298954062642979937715273000088457741871468238391929188212688","3166674128629412489175469104872290800173955146421836399553672759"},
			{"-157624825433230490762246168127797657567916321816555529634539929","-3324298954062642979937715273000088457741871468238391929188212688","-3481923779495873470699961441127886115309787790054947458822752617"},
			{"2556","9984", "12540"},
			{"-9984","2556","-7428"},
			{"-998422","2556", "-995866"},
			{"-9984", "255622", "-245638"},
			{"-998422","-2556", "-1000978"},
			{"-9984", "-255622", "-265606"},
			{"9984","0", "9984"},
			{"0","2556", "2556"},
			{"0", "1000150","1000150" },
			{"191502086816040508058769501485429142358480752283393809010901812903019017421636531501658722091387723965207369835613458680419152", "32429895406264297993771527300008845774187146823839192918821268800000000000000000000000000000000000000000000000000000000000000", "223931982222304806052541028785437988132667899107233001929723081703019017421636531501658722091387723965207369835613458680419152"}
			};
			for (var test : sums) {
				sumFile.write("ctor_char(\""+ test[0] + "\", A);\n");
				sumFile.write("ctor_char(\""+ test[1] + "\", B);\n");
				sumFile.write("ctor_char(\""+ test[2] + "\", T);\n");
				sumFile.write("big_int_sum(A, B, R);\n");
				sumFile.write("assert(strcmp(R->digits,T->digits)==0);\n");
				sumFile.write("clear_digit(A);\n");
				sumFile.write("clear_digit(B);\n");
				sumFile.write("clear_digit(T);\n");
				sumFile.write("clear_digit(R);\n");
				sumFile.write("\r\n");
			}
			sumFile.close();


			FileWriter substractionFile = new FileWriter("subtraction.txt"); 

			String[][] substractions = new String[][]{
				{"20003", "2456", "17547"},
				{"96643", "75754", "20889"}, 
				{"99900", "6006", "93894"}, 
				{"9984", "2556222", "-2546238"}, 
				{"0", "0", "0"}, 
				{"-9984", "2556", "-1001000"},
				{"-9984", "255622", "-265606"},
				{"-9984", "-255622", "-245638"}, 
				{"3324298954062642979937715273000088457741871468238391929188212688", "157624825433230490762246168127797657567916321816555529634539929", "3166674128629412489175469104872290800173955146421836399553672759"},
				{"157624825433230490762246168127797657567916321816555529634539929","3324298954062642979937715273000088457741871468238391929188212688", "3166674128629412489175469104872290800173955146421836399553672759"},
				{"-157624825433230490762246168127797657567916321816555529634539929","3324298954062642979937715273000088457741871468238391929188212688", "3481923779495873470699961441127886115309787790054947458822752617"},
				{"157624825433230490762246168127797657567916321816555529634539929", "-3324298954062642979937715273000088457741871468238391929188212688", "-3166674128629412489175469104872290800173955146421836399553672759"}, 
				{"-157624825433230490762246168127797657567916321816555529634539929", "-3324298954062642979937715273000088457741871468238391929188212688","-3166674128629412489175469104872290800173955146421836399553672759"}, 
				{"-9984","2556", "-12540"},
				{"993399393090909099393090", "964046696678166464181933","29352696412742635211157"}
			};
			substractionFile.write("BIG_INT * A = base_ctor();\n");
			substractionFile.write("BIG_INT * B = base_ctor();\n");
			substractionFile.write("BIG_INT * R = base_ctor();\n");
			substractionFile.write("BIG_INT * T = base_ctor();\n");
			substractionFile.write("\r\n");

			for (var test : substractions) {
				substractionFile.write("ctor_char(\""+ test[0] + "\", A);\n");
				substractionFile.write("ctor_char(\""+ test[1] + "\", B);\n");
				substractionFile.write("ctor_char(\""+ test[2] + "\", T);\n");
				substractionFile.write("big_int_substract(A, B, R);\n");
				substractionFile.write("assert(strcmp(R->digits,T->digits)==0);\n");
				substractionFile.write("clear_digit(A);\n");
				substractionFile.write("clear_digit(B);\n");
				substractionFile.write("clear_digit(T);\n");
				substractionFile.write("clear_digit(R);\n");
				substractionFile.write("\r\n");
			}
			substractionFile.close();



			FileWriter multiplicationFile = new FileWriter("multiplication.txt"); 

			multiplicationFile.write("BIG_INT * A = base_ctor();\n");
			multiplicationFile.write("BIG_INT * B = base_ctor();\n");
			multiplicationFile.write("BIG_INT * R = base_ctor();\n");
			multiplicationFile.write("BIG_INT * T = base_ctor();\n");
			multiplicationFile.write("\r\n");

			String[][] multiplications = new String[][]{
				{"2456", "20003", "49127368"}, 
				{"2456", "0", "0"},
				{"1111111111111111111111","1111111111111111111111", "1234567901234567901234320987654320987654321"}, 
				{"99339939309090909939309036434567534789534566322555599965352468877", "3324298954062642979937715273000088457741871468238391929188212688","523992042321994806059141329145437988132698862137233062019813141703019017421636531501658722091387723965207369835613458680419152"},
				{"3324298954062642979937715273000088457741871468238391929188212688","157624825433230490762246168127797657567916321816555529634539929","523992042321994806059141329145437988132698862137233062019813141703019017421636531501658722091387723965207369835613458680419152"}, 
				{"3324298954062642979937715273000088457741871468238391929188212688","1","3324298954062642979937715273000088457741871468238391929188212688"},
				{"1","3324298954062642979937715273000088457741871468238391929188212688", "3324298954062642979937715273000088457741871468238391929188212688"},
				{"1", "33242989540626429799377", "33242989540626429799377"},
				{"33242989540626429799377", "1", "33242989540626429799377"}, 
				{"33242989540626429799377", "10", "332429895406264297993770"}, 
				{"33242989540626429799377", "100", "3324298954062642979937700"}
			};



			for (var test : multiplications) {
				multiplicationFile.write("ctor_char(\""+ test[0] + "\", A);\n");
				multiplicationFile.write("ctor_char(\""+ test[1] + "\", B);\n");
				multiplicationFile.write("ctor_char(\""+ test[2] + "\", T);\n");
				multiplicationFile.write("big_int_multiply(A, B, R);\n");
				multiplicationFile.write("assert(strcmp(R->digits,T->digits)==0);\n");
				multiplicationFile.write("clear_digit(A);\n");
				multiplicationFile.write("clear_digit(B);\n");
				multiplicationFile.write("clear_digit(T);\n");
				multiplicationFile.write("clear_digit(R);\n");
				multiplicationFile.write("\r\n");
			}
			multiplicationFile.close();

		} catch (IOException e) {
			e.printStackTrace();
		}

		
	}
}
